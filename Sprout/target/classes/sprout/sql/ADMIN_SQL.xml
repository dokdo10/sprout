<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">
	
    <!-- 사용가능한 아이디인지 검사 -->
    <select id="selectCheckID" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
            SELECT count(admin.ID) ID_EXISTS, (SELECT count(IDX) as COUNT 
            								FROM company 
            								WHERE DOMAIN=#{domain}) DOMAIN_EXISTS
			FROM administrator admin 
				INNER JOIN license l ON admin.LICENSE = l.LICENSE
				INNER JOIN company c ON c.IDX = l.COMPANY_IDX
			WHERE admin.ID = #{id} AND c.DOMAIN = #{domain}
        ]]>
    </select>
   
    <!-- 등록되어 있는 UUID 인가 -->
    <select id="selectCheckUUID" parameterType="hashmap" resultType="hashmap">
    	<![CDATA[
    		SELECT count(admin.uuid) as IS_EXISTS, admin.LEVEL
			FROM administrator admin INNER JOIN license lic ON admin.license = lic.license
				INNER JOIN company c ON lic.COMPANY_IDX = c.IDX
			WHERE admin.uuid = #{uuid} AND c.domain = #{domain};
    	]]>
    </select>
    
    <!-- Login -->
    <select id="selectLogin" parameterType="hashmap" resultType="hashmap">
    	<![CDATA[
    		SELECT admin.*
			FROM administrator admin 
				INNER JOIN license lic ON admin.LICENSE = lic.LICENSE
				INNER JOIN company com ON lic.COMPANY_IDX = com.IDX
			WHERE ID=#{id} 
				AND PASSWORD = HEX(AES_ENCRYPT(#{pw}, 'rjadmstkakr'))
				AND com.DOMAIN = #{domain};
    	]]>
    </select>
    
    <!-- 아이디 찾기 -->
    <select id="selectFindUser" parameterType="hashmap" resultType="hashmap">
    	<![CDATA[
    		SELECT admin.ID, admin.NAME
  			FROM administrator admin
       			INNER JOIN license lic ON admin.license = lic.license
       			INNER JOIN company c ON lic.COMPANY_IDX = c.IDX
 			WHERE admin.NAME=#{name} AND c.domain = #{domain};
    	]]>
    </select>


    <!-- 관리자 등록 -->
    <insert id="insertUser" parameterType="hashmap" >
        INSERT INTO administrator(
			UUID,		ID,			PASSWORD,
			NAME,		BIRTH_DATE,	SEX,	
			PHONE,		LEVEL,	PARENT_UUID,
			SESSION,	REG_DATE,	LICENSE, 
			USE_DATA,	EMAIL)
     	VALUES (
     		#{uuid},	#{id},		HEX(AES_ENCRYPT(#{pw}, 'rjadmstkakr')),
     		#{name},	#{brith_date},	#{sex},
     		#{phone},	#{level},	#{parent_uuid},
     		'',			now(),		#{license},
     		1,			#{email} );
    </insert>
    
    <!-- 관리자 수정 -->
    <update id="updateUser" parameterType="hashmap" >
    	UPDATE administrator SET NAME=#{name}, PHONE=#{phone} , EMAIL=#{email}, BIRTH_DATE=#{brith_date}, SEX=#{sex} 
		WHERE UUID = #{uuid}
			AND PASSWORD = HEX(AES_ENCRYPT(#{pw}, 'rjadmstkakr'));
    </update>
   
    <!-- 관리자 활성/비활성 -->
    <update id="updateActive" parameterType="hashmap" >
    	UPDATE administrator SET USE_DATA = #{use_data}, DELETE_DATE = if( #{use_data}=0, now(), null)
		WHERE UUID = #{target_uuid};
    </update>
    
    <!--로그인 세션 업데이트 -->
    <update id="updateSession" parameterType="hashmap">
    	UPDATE administrator SET SESSION = #{session}
		WHERE UUID = #{uuid};
    </update>
    
</mapper>
